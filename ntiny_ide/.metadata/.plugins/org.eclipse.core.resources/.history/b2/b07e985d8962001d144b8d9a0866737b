#include "init.h"
#include "csr.h"

int main(void);
void int_disable(void) {
  csr_clear(mstatus , (1<<3) );
}
void int_enable(void) {
  csr_set(mstatus , (1<<3) );
}

void store_regs()
{
	__asm("addi x2, x2, -128");

	__asm("sw  x1, 0(x2)");  // gp
	__asm("sw  x2, 4(x2)");  // gp
	__asm("sw  x3, 8(x2)");  // gp
	__asm("sw  x4, 12(x2)");  // tp
	__asm("sw  x5, 16(x2)");  // t0
	__asm("sw  x6, 20(x2)");  // t1
	__asm("sw  x7, 24(x2)");  // t2
	__asm("sw  x8, 28(x2)");  // t2
	__asm("sw  x9, 32(x2)");  // t2
	__asm("sw x10, 36(x2)");  // a0
	__asm("sw x11, 40(x2)");  // a1
	__asm("sw x12, 44(x2)");  // a2
	__asm("sw x13, 48(x2)");  // a3
	__asm("sw x14, 52(x2)");  // a4
	__asm("sw x15, 56(x2)");  // a5
	__asm("sw x16, 60(x2)");  // a6
	__asm("sw x17, 64(x2)");  // a7
	__asm("sw x18, 68(x2)");  // t2
	__asm("sw x19, 72(x2)");  // t2
	__asm("sw x20, 76(x2)");  // t2
	__asm("sw x21, 80(x2)");  // t2
	__asm("sw x22, 84(x2)");  // t2
	__asm("sw x23, 88(x2)");  // t2
	__asm("sw x24, 92(x2)");  // t2
	__asm("sw x25, 96(x2)");  // t2
	__asm("sw x26, 100(x2)");  // t2
	__asm("sw x27, 104(x2)");  // t2
	__asm("sw x28, 108(x2)");  // t3
	__asm("sw x29, 112(x2)");  // t4
	__asm("sw x30, 116(x2)");  // t5
	__asm("sw x31, 120(x2)");  // t6

}
// load back registers from stack
void end_except()
{
	__asm("lw  x1, 0(x2)");  // gp
	__asm("lw  x2, 4(x2)");  // gp
	__asm("lw  x3, 8(x2)");  // gp
	__asm("lw  x4, 12(x2)");  // tp
	__asm("lw  x5, 16(x2)");  // t0
	__asm("lw  x6, 20(x2)");  // t1
	__asm("lw  x7, 24(x2)");  // t2
	__asm("lw  x8, 28(x2)");  // t2
	__asm("lw  x9, 32(x2)");  // t2
	__asm("lw x10, 36(x2)");  // a0
	__asm("lw x11, 40(x2)");  // a1
	__asm("lw x12, 44(x2)");  // a2
	__asm("lw x13, 48(x2)");  // a3
	__asm("lw x14, 52(x2)");  // a4
	__asm("lw x15, 56(x2)");  // a5
	__asm("lw x16, 60(x2)");  // a6
	__asm("lw x17, 64(x2)");  // a7
	__asm("lw x18, 68(x2)");  // t2
	__asm("lw x19, 72(x2)");  // t2
	__asm("lw x20, 76(x2)");  // t2
	__asm("lw x21, 80(x2)");  // t2
	__asm("lw x22, 84(x2)");  // t2
	__asm("lw x23, 88(x2)");  // t2
	__asm("lw x24, 92(x2)");  // t2
	__asm("lw x25, 96(x2)");  // t2
	__asm("lw x26, 100(x2)");  // t2
	__asm("lw x27, 104(x2)");  // t2
	__asm("lw x28, 108(x2)");  // t3
	__asm("lw x29, 112(x2)");  // t4
	__asm("sw x30, 116(x2)");  // t5
	__asm("sw x31, 120(x2)");  // t6
	__asm("addi x2, x2, 128");
	__asm("mret");
}

void ISR_I2C_ASM()
{
	//ISR_I2C();
}

void ISR_UART_ASM()
{
	//ISR_UART();
}

void ISR_EXT_ASM()
{
	ISR_EXT();
}

void ISR_SPI_ASM()
{
	//ISR_SPI();
}

void ISR_TIMER_ASM()
{
  //ISR_TIMER();
}

void RESET_HANDLER()
{
	__asm("mv  x1, x0");
	__asm("mv  x2, x1");
	__asm("mv  x3, x1");
	__asm("mv  x4, x1");
	__asm("mv  x5, x1");
	__asm("mv  x6, x1");
	__asm("mv  x7, x1");
	__asm("mv  x8, x1");
	__asm("mv  x9, x1");
	__asm("mv x10, x1");
	__asm("mv x11, x1");
	__asm("mv x12, x1");
	__asm("mv x13, x1");
	__asm("mv x14, x1");
	__asm("mv x15, x1");
	__asm("mv x16, x1");
	__asm("mv x17, x1");
	__asm("mv x18, x1");
	__asm("mv x19, x1");
	__asm("mv x20, x1");
	__asm("mv x21, x1");
	__asm("mv x22, x1");
	__asm("mv x23, x1");
	__asm("mv x24, x1");
	__asm("mv x25, x1");
	__asm("mv x26, x1");
	__asm("mv x27, x1");
	__asm("mv x28, x1");
	__asm("mv x29, x1");
	__asm("mv x30, x1");
	__asm("mv x31, x1");

	__asm("csrrw x0, mtvec, x0");
	__asm(".option push\n"
	".option norelax\n"
	"la gp, __global_pointer$\n"
	".option pop");
	__asm("la sp, __stack_top");
	__asm("add s0, sp, zero");
	extern char __bss_start,__BSS_END__;
	char *dst;
	for (dst = &__bss_start; dst< &__BSS_END__; dst++)
	{
	*dst = 0;
	__asm("nop");
	}
	main();
	__asm("jal x0, RESET_HANDLER");
}


extern __attribute__((section (".init"), naked))
void _init(){
	__asm("jal x0, RESET_HANDLER");
	__asm("jal x0, ISR_TIMER_ASM");	 
	__asm("jal x0, ISR_UART_ASM");	
	__asm("jal x0, ISR_I2C_ASM");	   
	__asm("jal x0, ISR_SPI_ASM");
	__asm("jal x0, ISR_EXT_ASM");

}
